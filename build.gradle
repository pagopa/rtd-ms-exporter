import java.util.function.Predicate

plugins {
    id 'java'
    id 'org.springframework.boot' version '3.0.2'
    id 'io.spring.dependency-management' version '1.1.0'
    id 'org.graalvm.buildtools.native' version '0.9.18'
    id 'jacoco'
    id "org.sonarqube" version "3.5.0.2730"
}

group = 'it.pagopa.gov'
version = '0.0.1-SNAPSHOT'
sourceCompatibility = '17'

configurations {
    compileOnly {
        extendsFrom annotationProcessor
    }
}

repositories {
    mavenCentral()
}

dependencies {
    implementation 'org.springframework.boot:spring-boot-starter-batch'
    implementation 'org.springframework.boot:spring-boot-starter-web'
    implementation 'org.springframework.boot:spring-boot-starter-actuator'
    implementation 'com.h2database:h2:2.1.214'

    compileOnly 'org.projectlombok:lombok'
    annotationProcessor 'org.projectlombok:lombok'
    testImplementation 'org.springframework.boot:spring-boot-starter-test'
    testImplementation 'org.springframework.batch:spring-batch-test'
}

test {
    finalizedBy jacocoTestReport
}

jacocoTestReport {
    dependsOn test // tests are required to run before generating the report
    reports {
        xml.required = true
        xml.destination file("${buildDir}/reports/jacoco.xml")
    }
}

test {
    useJUnitPlatform()
}

task testWithAgent(type: Test) {
    // GRAALVM_HOME must be set
    useJUnitPlatform()
    finalizedBy(metadataCopy)
}

graalvmNative {
    // Agent useful to get working with external libraries.
    // It allows to get additional reflection metadata, by default is run with test task
    // the metadata must be copied to META-INF/native-image as resource
    agent {
        defaultMode = "standard"
        enabled = true
        metadataCopy {
            inputTaskNames.add("testWithAgent")
            outputDirectories.add("src/main/resources/META-INF/native-image")
            mergeWithExisting = true
        }
        //callerFilterFiles.from("src/main/resources/native-filter/access-filter.json")
        tasksToInstrumentPredicate = { t -> (t.name == "testWithAgent") } as Predicate<Task>
    }

    binaries {
        main {
            useFatJar = true
            javaLauncher = javaToolchains.launcherFor {
                languageVersion = JavaLanguageVersion.of(17)
                vendor = JvmVendorSpec.matching("GraalVM Community")
            }
        }
    }
}